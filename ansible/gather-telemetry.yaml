---

- name: Gather Raspberry Pi telemetry
  hosts: all
  gather_facts: true
  become: true
  vars:
      max_temperature: 60

  tasks:
    - name: Get on-board temperature
      shell: vcgencmd measure_temp | grep --only-matching --extended-regexp "[0-9]{2}"
      register: temp

    - name: Print return information from the previous task
      ansible.builtin.debug:
        msg: "ERROR: {{inventory_hostname}} exceeded temperature limit {{ temp.stdout_lines[0]}}"
      when: temp.stdout_lines[0] > max_temperature

    - name: Save temperature to facts
      ansible.builtin.set_fact:
        core_temperature: "{{ temp.stdout_lines }}"
        cacheable: yes

    - name: Get uptime
      shell: uptime --since | awk '{ printf $1 }'
      register: uptime_since

#     - name: Print return information from the previous task
#       ansible.builtin.debug:
#         var: uptime_since

    - name: Save uptime to facts
      ansible.builtin.set_fact:
        boot_date: "{{ uptime_since.stdout_lines }}"
        cacheable: yes

    - name: Get cpu average
      shell: uptime | awk '{print $NF}'
      register: cpu_avg

#     - name: Print return information from the previous task
#       ansible.builtin.debug:
#         var: cpu_avg

    - name: Save CPU average
      ansible.builtin.set_fact:
        cpu_average: "{{ cpu_avg.stdout_lines }}"
        cacheable: yes

    - name: Get disk utilization
      shell: df --human-readable --output=pcent . | tail -1 | grep --only-matching --extended-regexp "[0-9]+"
      register: disk_util

#     - name: Print return information from the previous task
#       ansible.builtin.debug:
#         var: disk_util

    - name: Save disk utilization
      ansible.builtin.set_fact:
        disk_utilization: "{{ disk_util.stdout_lines }}"
        cacheable: yes


