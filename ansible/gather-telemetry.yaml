---

- name: Gather Raspberry Pi telemetry
  hosts: all
  gather_facts: false
  become: false
  vars:
      # Modify the following values to meet your requirements.
      max_temperature: '75'
      max_days_since_last_reboot: '7'
      max_cpu_utilization: '80'
      max_disk_utilization: '50'

  tasks:

    # Temperature Processing
    # We run a command to get the on-board temperature and then extract only the leading 2 digits.
    - name: Get on-board temperature
      shell: vcgencmd measure_temp | grep --only-matching --extended-regexp "[0-9]{2}"
      register: temp

    # If the value exceeds the variable 'max_temperature', then put an error message in the log.
    - name: Determine if the temperature is correct
      ansible.builtin.debug:
        msg: "RPIERROR: {{inventory_hostname}} temperature ({{ temp.stdout_lines[0]}}) exceeds limit {{ max_temperature }} "
      when: temp.stdout_lines[0] > max_temperature

    # Uptime Processing
    # We get he 'uptime' of the system and save it to a variable called 'boot_date'
    - name: Get uptime
      shell: uptime --since | awk '{ print $1 }'
      register: boot_date

    # We take that variable and convert it to elapsed days using a simple plugin script.
    - name: Set the elapsed days since the last reboot
      set_fact:
        elapsed_days: "{{ boot_date.stdout_lines[0] | calculate_elapsed_days }}"

    - name: Determine if we have not rebooted lately
      ansible.builtin.debug:
        msg: "RPIERROR: {{inventory_hostname}} days since last reboot ({{ elapsed_days}}) exceeds limit {{ max_days_since_last_reboot }} "
      when: elapsed_days > max_days_since_last_reboot

    # CPU Utilization
    # We grab the CPU utilization from the 'uptime' display and capture the leading digits of the last value on the line
    - name: Get cpu average
      shell: uptime | awk '{print $NF}' | cut --delimiter='.' --fields=1
      register: cpu_avg

    - name: Determine if our cpu average usage is acceptable
      ansible.builtin.debug:
        msg: "RPIERROR: {{inventory_hostname}} cpu utilization ({{ cpu_avg.stdout_lines[0] }}) exceeds limit {{ max_cpu_utilization}} "
      when: cpu_avg.stdout_lines[0] > max_cpu_utilization

    # Disk Utilization
    # We capture the disk usage from the 'df' command.
    - name: Get disk utilization
      shell: df --human-readable --output=pcent . | tail -1 | grep --only-matching --extended-regexp "[0-9]+"
      register: disk_util

    - name: Determine if we exceeded max disk utilization
      ansible.builtin.debug:
        msg: "RPIERROR: {{inventory_hostname}} disk utilization ({{ disk_util.stdout_lines[0] }}) exceeds limit {{ max_disk_utilization}} "
      when: disk_util.stdout_lines[0] > max_disk_utilization

